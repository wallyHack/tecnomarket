
link curso: https://www.youtube.com/watch?v=M1D4nd6Hihc

##############################################################################################
COSAS A TOMAR EN CUENTA DJANGO V3

- vistas basadas en clases 
http://ccbv.co.uk/

- extensiones para comprobar sintaxis en django(van en virtualenv)
pip install pylint
pip install pylint-django -> Esta se configura así:
Archivo -> prefencias -> configuración 
buscar en la pantalla izquierda: pylintArgs
click en esta opción: "python.linting.pylintArgs[]":[]

editar esto -> "python.linting.pylintArgs[]":[] así:
"python.linting.pylintArgs[]":[
    --errors.only  nota: agregar esto sin commillas, ni coma
    --load-plugins nota: agregar esto sin commillas, ni coma
    pylint_django   nota: agregar esto sin commillas
]

- extension en visual studio code para autocompletar código >> django
djaneiro

 1.- Agregar la app creada al proyecto en settings.py
Solución: polls.apps.PollsListConfic >> En este caso la app es polls
INSTALLED_APPS = [
	'todo_list.apps.TodoListConfig',
]

 1.5.- Incluir la urls de la app en el proyecto principal
Solución: Creamos un nuevo archivo llamado urls.py dentro de la aplicación
app_name = "posts"
urlpatterns = [
    path('', views.home, name='home'), # vistas basadas en funciones    
]

Y luego incluimos las urls de este archivo en el proyecto principal
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('posts/', include('posts.urls')), #incluimos las urls de la app posts
]

Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))

2.- Agregar esta ruta en TEMPLATES>DIR para que se reconozcan las plantillas en settings.py
Solución: Crear la estructura de carpetas correcta en la app polls
polls/templates/polls/base.html

Agregar esto en settings.py
TEMPLATES = [ 
	{
		'DIRS': [os.path.join(BASE_DIR, 'templates')],	
	},
]

CONFIGURANDO ARCHIVOS ESTATICOS(es parecido a los templates)
 3.- Agregar la estructura de carpetas(static) correcta para que se reconozcan los estilos
Solución:  Crear la estructura de carpetas correcta de static >> polls es la app (Nota: los archivos static son archivos css, javascript e imagenes)
polls/static/polls/style.css
polls/static/polls/css
polls/static/polls/img
polls/static/polls/js

Agregar estas lineas en los templates html(En la base.html):
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}">

Estas rutas son para todo lo que involucra css, imagenes, javascript, etc.
<link href="{% static 'core/vendor/bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
<link href="{% static 'core/vendor/font-awesome/css/font-awesome.min.css' %}" rel="stylesheet" type="text/css">
<link href="{% static 'core/css/clean-blog.min.css' %}" rel="stylesheet">
<header class="masthead" style="background-image: url('{% static 'core/img/home-bg.jpg' %}')">
<img src="{% static 'app/img/s9.jpeg' %}" alt="imagen producto">
<script src="{% static core/vendor/jquery/jquery.min.js %}"></script>
<script src="{% static core/vendor/bootstrap/js/bootstrap.bundle.min.js %}"></script>
<script src="{% static core/js/clean-blog.min.js %}"></script>

Y en settings.py agregamos esto:
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

y poner esto en url.py
+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) +  static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
 
 4.- Al renderizar las vistas a los templates siempre poner el nombre de la app primero; y generar su propio contexto
return render(request, 'polls/home.html', {})

 5.- Al usar enlaces siempre ponerlos así: Primero el nombre de la app y luego la vista
<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>

 7.- Al heredar de una template siempre ponerlo asi: 
polls/templates/polls/base.html >> según esta estructura
{% extends 'polls/base.html' %}

 8.- Al redireccionar a una vista o página se hace así:
return redirect('todo_list:home')

 9.- Diferencias entre render y redirect
return render(request, 'polls/home.html', {})
return redirect('todo_list:home')

 10.- Agregando bootstrap al proyecto
 Solo copiar la plantilla de ejemplo

 11.- Consultas a la DB
python manaye.py shell
p = Post("Mi gato Garfierd", contenido="Historieta", timestamp=timezone.now()) -> Creamos un registro nuevo
p.save()

queryset = Post.objects.all() -> Consultar todos los registros de la tabla
post = Posts.objects.get(pk=4) -> Consulta de un registro especifico
Posts.objects.filter(titulo="Mi gato garfield") -> Filtramos los registros por titulo

 12.- Confirmar si un usuario esta logeado(Nota: El usuario inicio sesión)
if request.user.is_authenticated:
 
 13.- Usando urls dinámicas -> el método trabaja con el parámetro que recibe de la url
path('<int:post_id>/', views.post_detail, name='post_detail'),

def post_detail(request, post_id=None):
    post = get_object_or_404(Post, pk=post_id)

 14.- Agregando formularios a los modelos
- Tenemos que crear un archivo nuevo dentro de la app llamado forms.py (Aqui se crea el formulario y se indica los campos que va tener)
- Creo la vista del formulario en la que lo creo y lo valido; para despues renderizarlo a una plantilla html ej. post_list.html
- Las formas de renderizas el formulario a la plantilla html son: 
{{ form.as_table }}
{{ form.as_p }}
{{ form.as_ul }}

 15.- Al usar formularios siempre agregar esta etiqueta: {% csrf_token %} >>por seguridad
   <h1>Post Form</h1>
   <form action="" method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Crear Post">
   </form>

 16.- Al editar(Actualizar) un registro primero consultar el registro que quiero editar, luego crear el formulario y le paso como parametro una instancia del obejeto consultado anteriormente
post = get_object_or_404(Post, pk=post_id)
if request.method == 'POST':
        form = PostForm(request.POST or None, instance=post)        
        if form.is_valid():
            form.save()  

 17.- Mostrando mensajes con django
from django.contrib import messages -> importamos esta línea

messages.success(request, 'Tu post ha sido creado correctamente JAJA...')

código de la vista
 {% if messages %}
        {% for message in messages %}
            <div class="alert alert-warning alert-dismissable" role=alert>
                <button class="close" data-dismiss="alert">
                    <small><sup>x</sup></small>                
                </button>
                {{ message }}
            </div>
        {% endfor %}
 {% endif %}

 18.- Vistas basadas en funciones
path('create/', views.post_create, name='post_create'), # vistas basadas en funciones    
path('<int:post_id>/', views.post_detail, name='post_detail'),
path('list/', views.post_list, name='post_list'),
path('update/<int:post_id>/', views.post_update, name='post_update'),
path('delete/<int:post_id>/', views.post_delete, name='post_delete'),

 19.- Vistas basadas en clases
path('', views.IndexView.as_view(), name='index'),
path('<int:pk>/', views.DetailView.as_view(), name='detail'),
path('<int:pk>/results/', views.ResultsView.as_view(), name='results'),

NOTA:
 20.- Usando la etiqueta {% block content %} {% endblock content %}
Todas las partes dinámicas de la página van en etiquetas block

21.- verbose_name = '' -> agrega un nombre global

------------------------------------------------------------------
22.-  CONFIGURACIÓN PARA LA SUBIDA DE ARCHIVOS MULTIMEDIA POR PARTE DE UN USUARIO
- instalar la librería pillow
- poner el atributo upload_to = "proyectos", en el campo imagen -> donde se guardan las imagenes
- crear una carpeta llamada "media" en la raiz del proyecto
- configurar los ficheros media en (settings.py), poner esto:
# media files
MEDIA_URL = '/media/'                -> donde el servidor de django busca los archivos
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  -> ruta interna donde tiene que encontrarlos

- nos dirigimos al archivo urls.py del proyecto principal y agregammos estas lineas
from django.conf import settings
from django.conf.urls.static import static

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

- ahora en models.py, agregamos el atributo de la imagen
image = models.ImageField(upload_to="productos", null=True)

-------------------------------------------------------------------

==> SUBIDA DE IMAGENES
link de como cargar imagenes y archivos en django
https://simpleisbetterthancomplex.com/tutorial/2016/08/01/how-to-upload-files-with-django.html

ARCHIVOS MEDIA
- se configuran los ficheros multimedia(archivos que sube el usuario, como imagenes o pdf)
- poner el atributo upload_to = "proyectos", en el campo imagen -> donde se guardan las imagenes
- crear una carpeta llamada "media" en la raiz del proyecto
- configurar los ficheros media en (settings.py), poner esto:
# media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

poner esto en url.py -> del proyecto general y no en la app
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

NOTA: LAS IMAGENES A SUBIR DEBEN DE TENER LA EXTENCIÓN CORRECTA
ej. basura.jpg reposteria.png imajen.jpeg --> correcto
ej. basura  reposteria  imagen   -> incorrecto

NOTA: Al modificar un modelo, agregando nuevos campos poner null=True y blank=True al nuevo campo,
porque ya hay instancias creadas y estas se afectarian tambien.(TENER CUIDADO AQUI)

23.- ------------------------------------------------------------------

ARCHIVOS ESTÁTICOS
se configuran los ficheros estáticos(imagenes, js, css):
app/static/app/css
app/static/app/img
app/css/app/js

- se agrega esto en settings.py
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

agregar en base.html -> ser cuidadoso y ver todo lo que involucra estaticos
{% load static %}
<link href="{% static 'core/vendor/bootstrap/css/bootstrap.min.css' %}" rel="stylesheet">
<link href="{% static 'core/vendor/font-awesome/css/font-awesome.min.css' %}" rel="stylesheet" type="text/css">
<link href="{% static 'core/css/clean-blog.min.css' %}" rel="stylesheet">

<!-- Bootstrap y Javascripts -->
<script src="{% static 'core/vendor/jquery/jquery.min.js' %}"></script>
<script src="{% static 'core/vendor/bootstrap/js/bootstrap.bundle.min.js' %}"></script>
<script src="{% static 'core/js/clean-blog.min.js' %}"></script>
------------------------------------------------------------------

ARCHIVOS DE TEMPLATES
- se configuran las plantillas:
app/templates/app/base.html
app/templates/app/home.html
app/template/app/about-me.html

se agrega esto en settings.py
'DIRS': [os.path.join(BASE_DIR, 'templates')],	


24.- url del menu
<nav id="nav">
    <ul>
        <li>
            <a href="{% url 'app:home' %}"> Inicio </a>
        </li>
        <li>
            <a href="{% url 'app:contacto' %}">Contacto</a>
        </li>
            <li><a href="{% url 'app:galeria' %}">Galería</a></li>
    </ul>
</nav>

******************************************************************************************

==> PERSONALIZACION ADMIN SITE
25.- configuramos el admin site con el plugin django-admin-interface

- URL de instalación: https://github.com/fabiocaccamo/django-admin-interface
- lo instalamos
pip install django-admin-interface

- modificamos el admin.py
class ProductoAdmin(admin.ModelAdmin):
    list_display = ['nombre', 'precio', 'descripcion', 'nuevo', 'marca', 'fecha_de_fabricacion']
    list_editable = ['nuevo']  # columna editable
    search_fields = ['nombre'] # busqueda por columna   
    list_filter = ['marca', 'nuevo', 'fecha_de_fabricacion'] # filtro por marca y nuevo
    list_per_page = 2 # paginación(número de articulos por página)

admin.site.register(Producto, ProductoAdmin)
admin.site.register(Marca)

- cambiamos el nombre de la app en al admin site
-> en apps.py agregamos esta linea:
verbose_name = 'tecnomarket'

26.- accedemos al contenido de una variable en templates
{{ nombre }}

{% for p in lista_de_productos %}
    <div class="producto">
        <div class="contenedor_producto">
                                
            {% if p.image %} <!-- si existe imagen -->
                <img src="{{ p.image.url }}" alt="imagen producto">
            {% endif %}

            <div class="detalle">
                <h5> {{ p.marca  | capfirst }} </h5>
                <h2> {{ p.nombre | title }} </h2>
                <h3> {{ p.precio | intcomma }} </h3>
            </div>                                    
        </div>
    </div>
{% endfor %}

===> USO DE FORMULARIOS EN DJANGO

- agregamos el archivo forms.py; y vinculamos el modelo y el formulario
from django import forms
from .models import Contacto

class ContactoForm(forms.ModelForm):
    class Meta:
        model = Contacto
        # fields = ['nombre', 'correo', 'telefono', 'tipo_de_consulta', 'mensaje', 'avisos']
        fields = '__all__'

- modificamos la vista
def contacto(request):
    # creamos una instancia con el formulario vacio
    data = {
        'form': ContactoForm()
    }

    if request.method == 'POST':
        formulario = ContactoForm(data=request.POST) # formularrio con datos
        if formulario.is_valid():
            formulario.save()
            data['mensaje'] = 'Contacto guardado'
        else:
            data['form'] = formulario

    return render(request, 'app/contacto.html', data)

- luego el template
    <form action="" class="formulario_contacto" method="POST">
        
        {% csrf_token %}
        {{form}}
        
        <br>
        <button type="submit" id="btnEnviar" class="button">Enviar</button>        

    </form>
    {{mensaje}}

===> INTEGRANDO BOOTSTRAP, ATRAVEZ DEL PLUGIN => crispy

- estilos para elementos del formulario
# agregando estilos a elementos por separado
# nombre = forms.CharField(widget=forms.TextInput(attrs={"class":"form-control"}))

- instalamos el plugin crispy y agregamos estilos a los elementos del formulario
pip install -r django-crispy-forms

- cargamos el plugin en el archivo settings.py
INSTALLED_APPS = [
    'crispy_forms',
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

- en el template contacto.html cargamos es plugin
{% load crispy_forms_tags %}    
    <br>
    <div class="row">
        <div class="col-12 col-md-6 offset-md-3">
            <div class="card">
                <div class="card-body">
                    <h2>Contactanos!</h2>
                    <hr>
        
                    <form action="" class="" method="POST">
                
                        {% csrf_token %}
                        {{form | crispy}}
                        <hr>

                        <br>
                        <div class="d-flex justify-content-end">
                            <input type="reset" value="Cancelar" class="btn btn-secondary">
                            &nbsp;
                            <button type="submit" id="btnEnviar" class="btn btn-primary">Enviar</button>        
                        </div>
                
                    </form>
                    {{mensaje}}
                </div>
            </div>
        </div>
    </div>

29.- CRUD PARA EL MODELO PRODUCTO, FUERA DEL ADMIN
nota: Al crear un modelo se crea su id por defecto

===> ALTAS EN UN MODELO Y CONFIGURACION PARA SUBIR ARCHIVOS(Imagenes o PDF)

- creamos el formulario apartir del modelo
class ProductoForm(forms.ModelForm):
    image = forms.FileField(required=False)
    class Meta:
        model = Producto        
        fields = '__all__'

        widgets = {
            "fecha_de_fabricacion": forms.SelectDateWidget()
        }

- despues creamos la vista incluyendo request.POST or None y request.FILES asi:
def agregar_producto(request):  
    # instancia de formulario vacío
    data = {
        'form': ProductoForm()
    }

    if request.method == 'POST':
        formulario = ProductoForm(data=request.POST or None, files=request.FILES)
        if formulario.is_valid():
            formulario.save()
            data['mensaje'] = "Producto guardado correctamente"
        else:
            data['form'] = formulario
    
    return render(request, 'app/producto/agregar.html', data)

- luego creamos el template donde lo renderizamos y el formulario lleva el atributo enctype="multipart/form-data"
<form action="" method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form | crispy }}                       
</form>

===> OPERACIÓN LISTAR

- primero creamos su vista
def lista_de_productos(request):
    productos = Producto.objects.all()
    data = {
        'productos': productos
    }
    return render(request, 'app/producto/listar.html', data)

- despues su url
 path('lista-productos/', views.lista_de_productos, name='lista_de_productos'),

 - luego su template

===> OPERACIÓN EDITAR EN EL MODELO PRODUCTO
 nota: Al crear un modelo se crea su id por defecto

 - primero creamos su vista, que es parecida a la de agregar
 def modificar_producto(request, id):    
    # primero buscamos el producto
    producto = get_object_or_404(Producto, pk=id)
    data = {
        'form': ProductoForm(instance=producto) # llenamos el form con el producto buscado
    }

    if request.method == 'POST':
        # guardamos los datos del form
        formulario = ProductoForm(data=request.POST or None, instance=producto, files=request.FILES)
        if formulario.is_valid():
            formulario.save() 
            return redirect('app:lista_de_productos')
        else:
            data['form'] = formulario

    return render(request, 'app/producto/modificar.html', data)

- despues especificamos su url
path('modificar-producto/<int:id>/', views.modificar_producto, name='modificar_producto')

- y al ultimo creamos su template para acceder a esta vista atraves de un boton y no por medio de URL
<th>
    <a class="btn btn-info btn-sm" href="{% url 'app:modificar_producto' p.id %}">Editar</a>    
</th>     

===> OPERACIÓN ELIMINAR DEL MODELO PRODUCTO
nota: Al crear un modelo se crea su id por defecto

- primero creamos la vista
def eliminar_producto(request, id):
    # primero buscamos el producto
    producto = get_object_or_404(Producto, pk=id)
    producto.delete()
    return redirect('app:lista_de_productos')

- despues su url
 path('eliminar-producto/<int:id>/', views.eliminar_producto, name="eliminar_producto"),

- modificamos el template para acceder a esta vista atraves de un boton y no por medio de URL
<th>
    <a class="btn btn-info btn-sm" href="{% url 'app:modificar_producto' p.id %}">Editar</a>
    <a class="btn btn-danger btn-sm" href="{% url 'app:eliminar_producto' p.id %}">Eliminar</a>
</th>  

33.- al usar enlaces siempre usar la etiqueta {% url %}
<a href="{% url 'app:agregar_producto' %}">Agregar Producto</a>

==> USANDO EL FRAMEWORK DE MESSAGES de Django

- agregamos esta linea en settings.py
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

- y ponemos esto en las vistas
from django.contrib import messages
messages.success(request, 'Agregado correctamente.')

- al ultimo modificamos el template
{% if messages %}
    {% for m in messages %}
        {{ m }}
    {% endfor %}                
{% endif %}
            
===> PERSONALIZANDO MENSAJES CON SWEETALERT
https://sweetalert.js.org/guides/#getting-started

- agregamos su CDN al base.html
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

- despues mostramos los mensajes usando django templates y javascript
{% if messages %}           
    {% for m in messages %}
        <script>
            swal({
                title: "Felicidades!",
                text: "{{ m }}",
                icon: "success",
            });
        </script>
    {% endfor %}        
{% endif %}

- personalizamos el boton eliminar con una confirmación

<a class="btn btn-danger btn-sm" href="#" onclick="eliminarProducto( {{p.id}} )">Eliminar</a>

{% block js %}
<script>
    function eliminarProducto(id){
        swal({
            title: "Estas seguro?",
            text: "esta acción no se puede regresar?",
            icon: "warning", 
            buttons: ["No, Cancelar", "Si, Eliminar"],
            dangerMode: true,                                
        })
        .then((willDeleted) =>{
            if(willDeleted){
                window.location.href = "/eliminar-producto/"+id+"/"
            }else{
                swal("La operación fue cancelada por el usuario");
            }
        });
    }
</script>
{% endblock js %}

==> PAGINACIÓN

- esta es nuestra vista
def lista_de_productos(request):
    productos = Producto.objects.all()
    page = request.GET.get('page', 1)
    
    try:
        paginator = Paginator(productos, 2) # mostramos 2 productos por página
        productos = paginator.page(page)
    except:
        raise Http404

    data = {
        'page_obj': productos,     
        'paginator': paginator   
    }

    return render(request, 'app/producto/listar.html', data)

- despues creamos un nuevo archivo llamado paginator.html(El de la documentación)
<div class="pagination">
    <span class="step-links">
        {% if page_obj.has_previous %}
            <a href="?page=1">&laquo; first</a>
            <a href="?page={{ page_obj.previous_page_number }}">previous</a>
        {% endif %}

        <span class="current">
            Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.
        </span>

        {% if page_obj.has_next %}
            <a href="?page={{ page_obj.next_page_number }}">next</a>
            <a href="?page={{ page_obj.paginator.num_pages }}">last &raquo;</a>
        {% endif %}
    </span>
</div>

- y lo incluimos donde queremos que vaya(En este caso en el template listar productos, al final)
{% include 'app/paginator.html' %}

===> FORMULARIO DE LOGIN, FUERA DEL ADMIN SITE
https://developer.mozilla.org/es/docs/Learn/Server-side/Django/Authentication

- creamos la carpeta registration en templates, y dentro creamos el archivo login.html
<body>
    {% load crispy_forms_tags %}
    <div class="container">
        <br>
        <br>
        <br>        
        <div class="row">
            <div class="col-12 col-md-6 offset-md-3">
                 <div class="card">
                     <div class="card-body">
                        <h2>Ingresa tus credenciales</h2>
                        <hr>

                        <form action="" method="POST">
                            {% csrf_token %}
                            {{ form | crispy}}

                            <a href="{% url 'app:home' %}">ir al home</a>
                            <input type="submit" value="ingresar" class="btn btn-success float-right">
                        </form>
                     </div>
                 </div>
            </div>
        </div>
    </div>
</body>

- en settings.py agregamos esto:
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

- despues en las urls del proyecto principal, agregamos las urls del sistema de autenticación
path('accounts/', include('django.contrib.auth.urls')),

- en base.html hacemos uso del sistema de autenticación
{% if user.is_authenticated %}
    <li>
        <a href="{% url 'logout' %}">cerrar sesión</a>
    </li>

    <li>
        <a href="#">@{{ user.username }}</a>
    </li>
{% else %}
    <li>
        <a href="{% url 'login' %}">iniciar sesión</a>
    </li>
{% endif %}

===> REGISTRO DE USUARIOS

- primero creamos la vista en views.py
def registro(request):
    # contexto que se renderiza al template
    data = {
        'form': CustomUserCreationForm()
    }

    if request.method == 'POST':
        formulario = CustomUserCreationForm(data=request.POST)
        if formulario.is_valid():
            formulario.save()

            # una vez creado el usuario, lo autenticamos y logeamos
            user = authenticate(username=formulario.cleaned_data["username"], password = formulario.cleaned_data["password1"])
            login(request, user)
            messages.success(request, "Te has registrado correctamente")
            # redireccionamos al home
            return redirect("app:home")

        data['form'] = formulario

    return render(request, 'registration/registro.html', data)

- luego la url en urls.py
path('registro/', views.registro, name='registro'),

- despues el formulario, apartir del modelo User, en ar archivo forms.py 
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class CustomUserCreationForm(UserCreationForm):
    
    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2']

- y al ultimo el template donde renderizamos el formulario de registro
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro de Usuarios</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

</head>
<body>
    {% load crispy_forms_tags %}
    <div class="container">
        <br>
        <br>
        <br>        
        <div class="row">
            <div class="col-12 col-md-6 offset-md-3">
                 <div class="card">
                     <div class="card-body">
                        <h2>Registro de Usuarios</h2>
                        <hr>

                        <form action="" method="POST">
                            {% csrf_token %}
                            {{ form | crispy}}

                            <a href="{% url 'app:home' %}">ir al home</a>
                            <br>
                            <a href="{% url 'login' %}">Iniciar sesión</a>                            
                            <input type="submit" value="registrar" class="btn btn-success float-right">
                        </form>
                     </div>
                 </div>
            </div>
        </div>
    </div>
</body>
</html>

===> AGREGANDO AUTORIZACION A LOS USUARIOS
@login_required => el usuario necesita estar logeado(No importa los permisos que tenga)
@permission_required =>  el usuario necesita un permiso en especifico

NOTA: lo básico es ocultar los enlaces
{% if perms.app.add_producto %}
    <li>
        <a href="{% url 'app:agregar_producto' %}">Agregar Producto</a>
    </li>
{% endif %}
                                                               
{% if perms.app.view_producto %}
    <li>
        <a href="{% url 'app:lista_de_productos' %}">Listar Productos</a>
    </li>
{% endif %} 

{% if perms.app.change_producto %}
    <a class="btn btn-info btn-sm" href="{% url 'app:modificar_producto' p.id %}">Editar</a>
{% endif %}
                                                                    
{% if perms.app.delete_producto %}
    <a class="btn btn-danger btn-sm" href="#" onclick="eliminarProducto( {{p.id}} )">Eliminar</a>
{% endif %}

from django.contrib.auth.decorators import login_required, permission_required

- archivo views.py

- se requiere estar logeado
@login_required
def home(request):

@login_required
def galeria(request):
    return render(request, 'app/galeria.html')

- se requiere un permiso especifico
@permission_required('app.add_producto')
def agregar_producto(request):  

@permission_required('app.view_producto')
def lista_de_productos(request):

@permission_required('app.change_producto')
def modificar_producto(request, id): 

@permission_required('app.delete_producto')
def eliminar_producto(request, id):

===> VALIDACIONES PERSONALIZADAS EN LOS FORMULARIOS
from .validators import MaxSizeFileValidator
from django.core.exceptions import ValidationError

=> validaciones normales(van en forms.py)
nombre = forms.CharField(min_length=3, max_length=10) 
precio = forms.DecimalField(min_value=1) 

=> validación perzonalizada
- creamos un archivo llamado validators.py
from django.core.exceptions import ValidationError

# validamos el tamaño de subida para una imagen
class MaxSizeFileValidator:

    def __init__(self, max_file_size=5):
        self.max_file_size = max_file_size

    def __call__(self, value): # valor recibido de la caja del formulario
        size  = value.size
        max_size = self.max_file_size * 1048576 # 1 MB = 1048576 bytes

        if size > max_size:
            raise ValidationError(f"El tamaño maximo del archivo debe de ser de {self.max_file_size}MB")

        return value

- aplicamos la validación(en forms.py)
image = forms.FileField(required=False, validators=[MaxSizeFileValidator(max_file_size=1)])

=> # validación personalizada para que no se repita el nombre(va en forms.py, ProductoForm)
def clean_nombre(self):
    nombre = self.cleaned_data['nombre']
    existe = Producto.objects.filter(nombre__iexact=nombre).exists()

    if existe:
        raise ValidationError("Este nombre ya existe")

    return nombre

===> USO DE DJANGO REST FRAMEWORK
- instalamos los siguientes modulos
pip install djangorestframework
pip install markdown       # Markdown support for the browsable API.
pip install django-filter  # Filtering support

- agregamos rest_framework a INSTALLED_APPS
INSTALLED_APPS = [
    ...
    'rest_framework',
]

- creammos las urls
urlpatterns = [
    ...
    path('api-auth/', include('rest_framework.urls'))
]

- creamos el archivo serializers.py para definir la representación de la API
from .models import Producto, Marca
from rest_framework import serializers
from .validators import MaxSizeFileValidator
from django.core.exceptions import ValidationError

class ProductoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Producto
        fields = '__all__'

- creamos las vistas para definir el comportamiento
# ViewSets define el comportamiento de la vista
class ProductoViewset(viewsets.ModelViewSet):
    queryset = Producto.objects.all() # extraemos los datos de la DB
    serializer_class = ProductoSerializer # convertimos los datos a json con la clase serializer

- definimos las rutas en el archivo urls.py
router = routers.DefaultRouter() # ruta base
router.register('producto', views.ProductoViewset)
router.register('marca', views.MarcaViewet)

# ejemplo: localhost:8000/api/producto

urlpatterns = [
    path('api/', include(router.urls)),
]

##############################################################################################
##############################################################################################


*** Errores Django v3.0 ***
Solución a errores oythoncircle.com

- TemplateDoesNotExist at /todo_list/home/
Error during template rendering
{% extends "base.html" %}

Solución:
Agregar el nombre de la aplicacion a la ruta
{% extends "todo_list/base.html" %}

https://www.pythoncircle.com/post/660/solving-django-error-templatedoesnotexist-at-app_name/
ver:
1.- nombre correcto de la aplicación
2.- nombre correcto de la plantilla
3.- Esta agregada la app al proyecto >> Installed Apps
4.- Esta ha estructura de directorios correcta >> app_name/templates/app_name/home.html
5.- agregar la ruta de plantillas >> 'DIRS': [os.path.join(BASE_DIR, 'templates')], en Settings.py

- Error al renderizar datos a una página html

Solución:
Poner el nombre de la aplicacion en la ruta
return render(request, 'app_name/home.html', {})

- AttributeError: type object 'List' has no attribute 'object'
Solución: Poner List.objects.all

- NoReverseMatch at /todo_list/home/. 'todo_list/home' is not a valid view function or pattern name
Solución:

- TypeError: all() got an unexpected keyword argument 'pk'
item = List.objects.all(pk=list_id)
Solución: Poner
item = List.objects.get(pk=list_id)


- NoReverseMatch at /todo_list/cross_off/19
Reverse for 'home' not found. 'home' is not a valid view function or pattern name

- ImportError: Couldn't import Django
Solución:
Debemos activar primero el entorno virtual y luego correr la app

- Djando admin v3.0 no inicia sesión, no hay errores, se sale del servidor solo
"POST /admin/login/?next=/admin/ HTTP/1.1" 302 0

Solución:

- TypeError: context must be a dict rather than ModelFormMetaclass
Solución: Cambiar el contexto a un dicccionario y luego renderizar este a la template

- UnboundLocalError: local variable 'context' referenced before assignment
Solución: Crear la variable context fuera de la condición para que sus limites no sean locales y se reconozcan al momento de renderizar

- error con sql3:  No such table: main.auth_user__old
solución: aplicar las migraciones para crear la base de datos
python mangae.py migrate

- error: vulnerabilidades de seguridad en el proyecto al usar django2.0
Solución: actualizar la versión de django en mi virtualenv
pip install --upgrade django

- error: 'app' is not a registered namespace
Solución: agregar app_name = 'app' en urls.py de la aplicación

- error: TypeError: context must be a dict rather than QuerySet
Solución: se debe mandar un diccionario al renderizar a la plantilla
return render(request, 'app/producto/listar.html', {'productos': productos}) 
